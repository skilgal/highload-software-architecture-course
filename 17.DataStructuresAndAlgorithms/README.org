#+TITLE: HSA17 Data Structures and Algorithms

* Algorithm implementation
** BST [0/3] :file `BST.worksheet.sc`
[[file:impl/bst.py][Binary Search Tree Implementation]]
** Counting Sort
[[file:impl/counting.py][Counting Sort]]
* Tests algorithm
** BST measures

*** Insert

**** Gen data file for random data insertion

#+begin_src python :results output
from impl.bst import *
from random import randint
import time
import os

print("Insert measurement")

dataSetSize = 5000

filename = os.path.join(os.path.dirname(__file__), "./data/insert-measures.dat")
file_object = open(filename, "w")

file_object.write("# array_size time\n")
for size in range(1, dataSetSize):
    bst = BST(0)

    for i in range(0, size):
        bst.insert(randint(1, dataSetSize))

    start = time.perf_counter_ns()
    bst.insert(randint(1, dataSetSize))
    end = time.perf_counter_ns()
    file_object.write("{} {}\n".format(size, end - start))

file_object.close()
#+end_src

#+RESULTS:
: Insert measurement

**** Show result (requires `gnuplot`)
Script saves result to the `bst-insert-measurement.png` file

#+begin_src shell
gnuplot 'bst-insert.p'
open 'complexity/bst-insert-measurement.png'
#+end_src

#+RESULTS:

[[file:complexity/bst-insert-measurement.png][Insert BST]]

*** Search
**** Gen data file

#+begin_src python :results output
from impl.bst import *
from random import randint
import time
import os

print("Search measurement")
dataSetSize = 5000

filename = os.path.join(os.path.dirname(__file__), "./data/search-measures.dat")
file_object = open(filename, "w")

file_data = []
file_data.append("# array_size time\n")
for size in range(1, dataSetSize):
    bst = BST(0)
    for i in range(0, size):
        bst.insert(randint(1, dataSetSize))

    start = time.perf_counter_ns()
    bst.find(randint(1, dataSetSize))
    end = time.perf_counter_ns()
    file_data.append("{} {}\n".format(size, end - start))

file_object.write(''.join(file_data))
file_object.close()

#+end_src

#+RESULTS:
: Search measurement

**** Show result (requires `gnuplot`)
Script saves result to the `bst-search-measurement.png` file

#+begin_src shell
gnuplot 'bst-search.p'
open 'complexity/bst-search-measurement.png'
#+end_src

#+RESULTS:

[[file:complexity/bst-search-measurement.png][Search BST]]

*** Delete
**** Gen data file

#+begin_src python :results output
from impl.bst import *
from random import randint
import time
import os

print("Delete measurement")
dataSetSize = 1000

filename = os.path.join(os.path.dirname(__file__), "./data/delete-measures.dat")
file_object = open(filename, "w")

file_object.write("# array_size time\n")
for size in range(1, dataSetSize):
    bst = BST(0)
    for i in range(0, size):
        bst.insert(randint(1, dataSetSize))

    start = time.perf_counter_ns()
    bst.delete(randint(1, dataSetSize))
    end = time.perf_counter_ns()
    file_object.write("{} {}\n".format(size, end - start))

file_object.close()
#+end_src

#+RESULTS:
: Delete measurement

**** Show result (requires `gnuplot`)
Script saves result to the `bst-delete-measurement.png` file

#+begin_src shell
gnuplot 'bst-delete.p'
open 'complexity/bst-delete-measurement.png'
#+end_src

#+RESULTS:

[[file:complexity/bst-delete-measurement.png][Delete BST]]

** Counting Sort measures
*** Sort sorted data set

#+begin_src python :results output
from impl.counting import *
from random import randint
import time
import os

print("Counting Sort measurement")

dataSetSize = 1000

filename = os.path.join(os.path.dirname(__file__), "./data/counting-sorted.dat")
file_object = open(filename, "w")
file_object.write("# array_size time\n")
for size in range(1, dataSetSize):
    data = []

    for i in range(0, size):
        data.append(randint(1, dataSetSize))

    data.sort()
    start = time.perf_counter_ns()
    sort(data)
    end = time.perf_counter_ns()
    file_object.write("{} {}\n".format(size, end - start))

file_object.close()
#+end_src

#+RESULTS:
: Counting Sort measurement

Script saves result to the `bst-delete-measurement.png` file

#+begin_src shell
gnuplot 'counting-sorted.p'
open 'complexity/counting-sorted.png'
#+end_src

#+RESULTS:

[[file:complexity/counting-sorted.png][Counting Sorted]]

*** Sort reverse sorted data set

#+begin_src python :results output
from impl.counting import *
from random import randint
import time
import os

print("Counting Sort measurement")

dataSetSize = 1000

filename = os.path.join(os.path.dirname(__file__), "./data/counting-reverse-sorted.dat")
file_object = open(filename, "w")
file_object.write("# array_size time\n")
for size in range(1, dataSetSize):
    data = []

    for i in range(0, size):
        data.append(randint(1, dataSetSize))

    data.sort()
    data.reverse()
    start = time.perf_counter_ns()
    sort(data)
    end = time.perf_counter_ns()
    file_object.write("{} {}\n".format(size, end - start))

file_object.close()
#+end_src

#+RESULTS:
: Counting Sort measurement

Script saves result to the `bst-delete-measurement.png` file

#+begin_src shell
gnuplot 'counting-reverse-sorted.p'
open 'complexity/counting-reverse-sorted.png'
#+end_src

#+RESULTS:

[[file:complexity/counting-reverse-sorted.png][Counting Reversed Sorted]]

*** Sort random data set

#+begin_src python :results output
from impl.counting import *
from random import randint
import time
import os

print("Counting Sort measurement")

dataSetSize = 1000

filename = os.path.join(os.path.dirname(__file__), "./data/counting-random.dat")
file_object = open(filename, "w")
file_object.write("# array_size time\n")
for size in range(1, dataSetSize):
    data = []

    for i in range(0, size):
        data.append(randint(1, dataSetSize))

    start = time.perf_counter_ns()
    sort(data)
    end = time.perf_counter_ns()
    file_object.write("{} {}\n".format(size, end - start))

file_object.close()
#+end_src

#+RESULTS:
: Counting Sort measurement

Script saves result to the `bst-delete-measurement.png` file

#+begin_src shell
gnuplot 'counting-random.p'
open 'complexity/counting-random.png'
#+end_src

#+RESULTS:

[[file:complexity/counting-random.png][Counting Random]]
*** Same elements data set

#+begin_src python :results output
from impl.counting import *
from random import randint
import time
import os

print("Counting Sort measurement")

dataSetSize = 1000

filename = os.path.join(os.path.dirname(__file__), "./data/counting-same.dat")
file_object = open(filename, "w")
file_object.write("# array_size time\n")
for size in range(1, dataSetSize):
    data = []

    for i in range(0, size):
        data.append(100)

    start = time.perf_counter_ns()
    sort(data)
    end = time.perf_counter_ns()
    file_object.write("{} {}\n".format(size, end - start))

file_object.close()
#+end_src

#+RESULTS:
: Counting Sort measurement

Script saves result to the `bst-delete-measurement.png` file

#+begin_src shell
gnuplot 'counting-same.p'
open 'complexity/counting-same.png'
#+end_src

#+RESULTS:

*** Data set contains the highest element with big diff compared to other

#+begin_src python :results output
from impl.counting import *
from random import randint
import time
import os

print("Counting Sort measurement")

dataSetSize = 500

filename = os.path.join(os.path.dirname(__file__), "./data/counting-diff.dat")
file_object = open(filename, "w")
file_object.write("# array_size time\n")
for size in range(1, dataSetSize):
    data = []

    for i in range(0, size):
        data.append(1)
    data.append(1_000_000)

    start = time.perf_counter_ns()
    sort(data)
    end = time.perf_counter_ns()
    file_object.write("{} {}\n".format(size, end - start))

file_object.close()
#+end_src

#+RESULTS:
: Counting Sort measurement

Script saves result to the `bst-delete-measurement.png` file

#+begin_src shell
gnuplot 'counting-diff.p'
open 'complexity/counting-diff.png'
#+end_src

#+RESULTS:
